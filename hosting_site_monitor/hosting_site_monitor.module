<?php

/**
 * Implementation of hook_cron
 */
function hosting_site_monitor_cron()
{
	$interval = variable_get('hosting_site_monitor_interval', 60 * 60);
	if (time() >= variable_get('hosting_site_monitor_next_execution', 0)) {
		variable_set('hosting_site_monitor_next_execution', time() + $interval);
		_hosting_site_monitor_check_sites();
	}
}

/**
 * Attempt to access each site
 */
function _hosting_site_monitor_check_sites()
{
	// Acceptable responds codes
	$acceptable_codes = explode(',', variable_get('hosting_site_monitor_accept_response_codes', '200'));

	// Load sites
	$query = new EntityFieldQuery();
	$result = $query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'site')
		->propertyOrderBy('title', 'ASC')
		->execute();
	$nodes = node_load_multiple(array_keys($result['node']));

	// Iterate over each site
	$errors = array();
	$success = array();
	$ignore = preg_split('/[\s,]+/', variable_get('hosting_site_monitor_ignore', ''));
	foreach ($nodes as $node) {
		if ($node->site_status == 1) {

			// Look for site in ignore list
			if (!in_array($node->title, $ignore)) {

				// Attempt site
				$handle = curl_init($node->title);
				curl_setopt($handle, CURLOPT_RETURNTRANSFER, TRUE);
				curl_setopt($handle, CURLOPT_FOLLOWLOCATION, TRUE);
				curl_setopt($handle, CURLOPT_NOBODY, TRUE);
				$response = curl_exec($handle);
				$http_code = curl_getinfo($handle, CURLINFO_HTTP_CODE);
				if (in_array($http_code, $acceptable_codes)) {
					$success[$node->title] = $http_code;
				} else {
					$errors[$node->title] = $http_code;
				}
				curl_close($handle);

				// Check SSL expiration
				if ($node->https_enabled > 0) {
					$get = stream_context_create(array('ssl' => array('capture_peer_cert' => TRUE)));
					$read = stream_socket_client('ssl://' . $node->title . ':443', $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $get);
					$cert = stream_context_get_params($read);
					$certinfo = openssl_x509_parse($cert['options']['ssl']['peer_certificate']);
					if (empty($certinfo)) {
						$errors[$node->title] = 'Certificate error';
					} else {
						if (strtotime('+1 week') < $certinfo['validTo_time_t']) {
							$errors[$node->title] = 'Certificate will expire ' . date('Y-m-d', $certinfo['validTo_time_t']);
						}
					}
				}
			}
		}
	}

	// Send notification
	$email = variable_get('hosting_site_monitor_email', FALSE);
	if (!empty($errors) && $email) {
		$message = "The following sites returned error codes:\n\n";
		foreach ($errors as $url => $error_code) $message .= "$url  ($error_code)\n";
		mail($email, '[AEGIR ALERT] ' . count($errors) . ' sites returned error codes', $message);
	}

	// Display message
	drupal_set_message(
		(count($errors) + count($success)) . ' sites were checked, ' .
		count($errors) . ' returned error codes.',
		empty($errors) ? 'status' : 'warning'
	);
}

/**
 * Implementation of hook_menu
 */
function hosting_site_monitor_menu()
{
	$items['admin/hosting/site_monitor'] = array(
		'title' => 'Site monitoring',
		'description' => 'Configure monitoring for hosted sites',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('hosting_site_monitor_settings'),
		'access arguments' => array('administer hosting')
	);
	return $items;
}

/**
 * Configuration form
 */
function hosting_site_monitor_settings()
{
	$intervals = drupal_map_assoc(array(
		strtotime('15 minutes', 0),
		strtotime('30 minutes', 0),
		strtotime('1 hour', 0),
		strtotime('1 day', 0)
	), 'format_interval');

	$form['hosting_site_monitor_check'] = array(
		'#type' => 'submit',
		'#submit' => array('_hosting_site_monitor_check_sites'),
		'#value' => t('Check sites now')
	);
	$form['hosting_site_monitor_interval'] = array(
		'#type' => 'select',
		'#title' => t('Check sites every'),
		'#default_value' => variable_get('hosting_site_monitor_interval', strtotime('1 day', 0)),
		'#options' => $intervals
	);
	$form['hosting_site_monitor_email'] = array(
		'#type' => 'textfield',
		'#title' => t('Send alerts to'),
		'#default_value' => variable_get('hosting_site_monitor_email', '')
	);
	$form['hosting_site_monitor_accept_response_codes'] = array(
		'#type' => 'textfield',
		'#title' => t('Accept response codes'),
		'#default_value' => variable_get('hosting_site_monitor_accept_response_codes', '200')
	);
	$form['hosting_site_monitor_ignore'] = array(
		'#type' => 'textarea',
		'#title' => t('Ignore sites'),
		'#default_value' => variable_get('hosting_site_monitor_ignore', '')
	);

	return system_settings_form($form);
}

?>
